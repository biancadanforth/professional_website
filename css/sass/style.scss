// biancadanforth.com Sass stylesheet

// ------------ CONSTANTS -------------

// COLORS
//Made $off-white rgb for background overlay on <body>
$off-white: rgb(251, 252, 237);
$blue: #418ac9;
$yellow: rgb(241,196,15);
$dark-grey: #545454;
$grey: #6d6d6d;

// FONTS
$font-main: 'Montserrat', sans-serif;
$letter-spacing: 1px;

// MARGIN & PADDING
$margin-default: 30px;
$margin-small: 20px;
$padding-default: 30px;
$padding-small: 20px;

// %placeholder example
%no-underline {
	text-decoration: none;
}

// ------------ MIXINS -------------

//<h1> styles with defaults
@mixin section-title($color: $dark-grey) {
	margin: 0;
	font: {
		size: 1.75em;
		weight: 700;
	}
	line-height: 1.25;
	text: {
		align: center;
		transform: uppercase;
	}
	letter-spacing: $letter-spacing;
	// color could alternately be $off-white or
	// $dark-grey depending on section
	// background color
	color: $color;
}

// diagonal section divider mixin
// based on example from: https://blog.omgmog.net
// better to specify a fixed $height than an angle so top/bottom whitespace (margin/padding) doesn't change with viewport width
@mixin diagonal-background-top($width: 1000px, $height: 60px, $color: $blue) {
    position: relative;
   // Because this img is a background img, with no content contained inside the pseudo-element, we need to give it an explicit height so it is visible.
    // We need the height of the element to be expressed a percentage of its width to ensure it doesn't get cropped anywhere as it scales.
    // You canâ€™t just apply this using the height property though, as that will set the height as a percentage of the height of the parent element,
    // so we give the element a padding-top instead, since padding with % units bases it off of the width of the element itself.
    // Note: to add/remove units to a calculated result, you have to multiply or divide.
    // to work out the height as a percentage of the width, simply solve for x in (H/W) = (x/100), a basic proportion equivalence:
    $v-pad: (($height / $width) * 100) * 1%;
    // add height of diagonal divider section as padding-bottom to <section>
    padding-bottom: $v-pad;
    // have to add a margin to the last child in <section> (of any type), because it's an absolute value in px versus a % like v-pad, so it cannot be directly added to the <section>'s padding-bottom as "padding-bottom: $v-pad + $padding-default" are different units! One is relative, %, and the other is absolute (px).
    & > :last-child {
    	padding-bottom: $padding-default;
    }
    // create a pseudo-element inside of the <section> element (becomes the last child
    // of the element)
    &::after {
  		// place divider immediately underneath the preceding section; positions
  		// relative to closest positioned ancestor (in this case, the )
  		position: absolute;
      bottom: 0;
      left: 0;
  		// remove 'px' units from $width and $height by dividing it out for <svg> interpolation
      $w-int: $width / 1px;
      $h-int: $height / 1px;
      padding-top: $v-pad;
      // draw the <svg> based on coordinates and interpolation set by triangle $width and $height. The enclosed area becomes a polygon (our triangle in this case)
      background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="#{$w-int}" height="#{$h-int}"><polygon points="0,#{$h-int} #{$w-int},0 #{$w-int},#{$h-int}" style="fill:#{$color};stroke:#{$color};stroke-width:0"></polygon></svg>');
      background-repeat: no-repeat;
      // Scales the image as large as possible and maintains image aspect ratio
      // (image doesn't get squished). The image "covers" the entire width or height of the container.
      background-size: cover;
      width: 100%;
      // The content CSS property is used with the ::before and ::after pseudo-elements to generate
      // content in an element. Objects inserted using the content property are anonymous.
      // if the pseudo-element has no content, it won't display at all
      content: '';
    }
}

// diagonal section divider mixin
// based on example from: https://blog.omgmog.net
// better to specify a fixed $height than an angle so top/bottom whitespace (margin/padding) doesn't change with viewport width
@mixin diagonal-background-bottom($width: 1000px, $height: 60px, $color: $blue) {
    position: relative;
    $v-pad: (($height / $width) * 100) * 1%;
    padding-top: $v-pad;
    // have to add a margin to the last child in <section> (of any type), because it's an absolute value in px versus a % like v-pad, so it cannot be directly added to the <section>'s padding-bottom as "padding-bottom: $v-pad + $padding-default"
    & > :first-child {
    	padding-top: $padding-default;
    }
    &::before {
    	//gives the svg a $blue colored whitespace of $padding-default vertical height
  		height: $padding-default;
  		position: absolute;
      top: 0;
      left: 0;
      $w-int: $width / 1px;
      $h-int: $height / 1px;
      padding-top: $v-pad;
      background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="#{$w-int}" height="#{$h-int}"><polygon points="0,#{$h-int} #{$w-int},0 0,0" style="fill:#{$color};stroke:#{$color};stroke-width:0"></polygon></svg>');
      background-repeat: no-repeat;
      background-size: cover;
      width: 100%;
      content: '';
    }
}

// shadow mixin
@mixin shadowed {
box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}

// border radius mixin
@mixin rounded($radius) {
	border-radius: $radius;
}


/*
*-----------------------------------------
* TEMPORARY UNDER CONSTRUCTION NOTIFY BAR
*-----------------------------------------
*/

.notify {
	box-sizing: border-box;
	display: flex;
	justify-content: center;
	align-items: center;
	position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
  width: 100%;
  background-color: rgba(241,196,15, .85);
  color: $dark-grey;
  font-weight: 700;
  text-align: center;
  max-height: 1000px;
  overflow: hidden;
  transition: max-height 6s ease;
  box-shadow: 1px 2px 4px rgba(0,0,0,.2);
  padding: 0 $padding-small;
  p {
  	line-height: 1.25;
  	padding: .5*$padding-small 0;
  }
  a {
  	margin-left: 2*$margin-small;
  	position: relative;
  	height: 50px;
  	width: 15px;

  	@media (max-width: 700px) {
  		margin-left: $margin-small;
  	}
  	svg {
	  	position: absolute;
	  	top: 50%;
	  	left: 50%;
	  	width: 15px;
	  	transform: translate(-50%, -50%);
	  	pointer-events: none;
	  	fill: $dark-grey;
  	}
  }
}

.hidden {
  max-height: 0;
  transition: max-height 3s ease;
}

/*
*-------------------------------------
*-------------- GLOBAL ---------------
*-------------------------------------
*/

//Override boilerplate styles
img {
	box-sizing: border-box;
}

a {
	display: inline-block;
	svg {
		display: block;
	}
}

body {
	font: {
		family: $font-main;
		size: 100%;
	}
	// color overlay applied to background pattern
	background:
    /* top, transparent $off-white, faked with gradient */ 
    linear-gradient(
      rgba(251, 252, 237, 0.4), 
      rgba(251, 252, 237, 0.4)
    ),
    /* bottom, image */
    url("../images/pw_maze_white.png");
	color: $grey;
	background-attachment: fixed;
	line-height: 1.5;
}

header {
	max-width: 100%;
	margin-top: $margin-small;
	text-align: center;
	tspan {
		fill: $blue;
	}
	path {
		stroke: $blue;
	}
}

nav ul {
	display: flex;
	justify-content: space-between;
	margin: $margin-default $margin-small 0;
	list-style: none;
	font: {
		size: 0.875em;
		weight: bold;
	}
	line-height: 1.5;
	text: {
		align: center;
		transform: uppercase;
	}
	color: $grey;

	@media (min-width: 600px) {
		justify-content: center;
		font-size: 1em;
	}

	li {
		@media (min-width: 600px) {
			margin: 0 $margin-default;
		}
	}

	a {
		@extend %no-underline;
		color: $grey;
		letter-spacing: $letter-spacing;
		transition: letter-spacing .5s;

		&:hover {
			letter-spacing: 5px;
			transition: letter-spacing .5s;

			@media (max-width: 350px) {
				letter-spacing: $letter-spacing;
				transition: none;
			}
		}
	}

	/* Reserve space for letter-spacing (or any :hover state styles)
	* content in ::after pseudo element and using title attribute
	* in HTML as a source for content.
	*/
	a::after {
		display: block;
		content: attr(aria-label);
		letter-spacing: 5px;
		height: 0;
		color: transparent;
		overflow: hidden;
		visibility: hidden;

		@media (max-width: 350px) {
			letter-spacing: 0;
		}
	}
}

// flags which nav link corresponds to the current page
.current-page {
	margin: 5px 0 0 0;
	border-color: $yellow;
	border-width: 3px;
}

h2 {
	font: {
		size: 1.5em;
		weight: 700;
	}
	letter-spacing: $letter-spacing;
	margin-bottom: $margin-small;
}

h3 {
	font: {
		size: 1em;
		weight: 700;
	}
	letter-spacing: 1.25*$letter-spacing;
	margin-bottom: $margin-small;
	text-transform: uppercase;
}

p {
	font: {
		size: 1em;
		weight: 400;
	}
}

// top page <section>
.primary {
	margin-top: $margin-default;
	text-align: center;
	h1 {
		@include section-title;
	}
	@include diagonal-background-top;
}

// bottom page <section>
.secondary {
	padding: $padding-default $padding-default 0;
	background-color: $blue;
	color: $off-white;
	h1 {
		@include section-title($off-white);
	}
	svg {
		width: 20px;
		fill: $off-white;
	}
}

footer {
	text-align: center;
	@include diagonal-background-bottom;
	margin-bottom: $margin-default;
	span {
		display: flex;
		justify-content: center;
		align-items: center;
		margin: $margin-default 0;
		a {
			width: 40px;
			height: 40px;
			margin: 0 $margin-small;
			background-color: $yellow;
			padding: 3px;
			@include rounded(2px);

			@media (max-width: 450px) {
				width: 30px;
				height: 30px;
				margin: 0 .5*$margin-small;
			}
		}
		svg {
			width: 100%;
			height: inherit;
			fill: $off-white;
			.outer-ring {
				fill: transparent;
			}
		}
	}
}

/***************************************** 
*-------HOME PAGE - WELCOME SECTION-------
*****************************************/

.primary {
	.split-screen {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin: $margin-default $margin-default 0;
		.welcome-profile {
			border-radius: 50%;
			width: 50%;
			max-width: 250px;
			@include shadowed;
		}
		.welcome-message {
			margin-top: $margin-default;
			max-width: 500px;
			font-size: 1.125em;
		}
		@media (min-width: 800px) {
			flex-direction: row-reverse;
			justify-content: center;
			.welcome-message {
				flex: 2 0 67%;
				margin-right: $margin-default;
				margin-top: 0;
			}
			.welcome-profile {
				flex: 1 0 33%;
			}
		}
	}
}


/***************************************** 
*---------HOME PAGE - WORK SECTION--------
*****************************************/

.work-wrapper {
	display: flex;
	flex-direction: column;
	max-width: 850px;
	margin: 0 auto;
	.project {
	max-width: 500px;
	margin: 0 auto;
		.project-header {
			margin-top: $margin-default;
			display: flex;
			justify-content: space-between;
			align-items: center;
			span:last-child {
				margin-left: $margin-small;
			}
		}
		.project-description {
			margin-bottom: $margin-small;
		}
		img {
			width: 100%;
			border: 5px solid $off-white;
			@include shadowed;
			@include rounded(2px);
		}
	}
	@media (min-width: 800px) {
		flex-flow: row wrap;
		.project {
			max-width: 300px;
		}
	}
}