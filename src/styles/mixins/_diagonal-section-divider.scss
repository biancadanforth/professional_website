// diagonal-section-divider.scss

// diagonal section divider mixin
// based on example from: https://blog.omgmog.net
// better to specify a fixed $height than an angle so top/bottom whitespace (margin/padding) doesn't change with viewport width
@mixin diagonal-background-top($width: 1000px, $height: 60px, $color: $blue) {
	position: relative;
   // Because this img is a background img, with no content contained inside the pseudo-element, we need to give it an explicit height so it is visible.
    // We need the height of the element to be expressed a percentage of its width to ensure it doesn't get cropped anywhere as it scales.
    // You canâ€™t just apply this using the height property though, as that will set the height as a percentage of the height of the parent element,
    // so we give the element a padding-top instead, since padding with % units bases it off of the width of the element itself.
    // Note: to add/remove units to a calculated result, you have to multiply or divide.
    // to work out the height as a percentage of the width, simply solve for x in (H/W) = (x/100), a basic proportion equivalence:
    $v-pad: (($height / $width) * 100) * 1%;
    // add height of diagonal divider section as padding-bottom to <section>
    padding-bottom: $v-pad;
    // have to add a margin to the last child in <section> (of any type), because it's an absolute value in px versus a % like v-pad, so it cannot be directly added to the <section>'s padding-bottom as "padding-bottom: $v-pad + $padding-default" are different units! One is relative, %, and the other is absolute (px).
    & > :last-child {
    	padding-bottom: 2*$padding-default;

      @media(max-width: 900px) {
        padding-bottom: $padding-default;
      }
    }
    // create a pseudo-element inside of the <section> element (becomes the last child
    // of the element)
    &::after {
  		// place divider immediately underneath the preceding section; positions
  		// relative to closest positioned ancestor (in this case, the )
  		position: absolute;
  		bottom: 0;
  		left: 0;
  		// remove 'px' units from $width and $height by dividing it out for <svg> interpolation
  		$w-int: $width / 1px;
  		$h-int: $height / 1px;
  		padding-top: $v-pad;
      // draw the <svg> based on coordinates and interpolation set by triangle $width and $height. The enclosed area becomes a polygon (our triangle in this case)
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='#{$w-int}' height='#{$h-int}'%3E%3Cpolygon points='0,#{$h-int} #{$w-int},0 #{$w-int},#{$h-int}' style='fill:rgb(41,128,185);stroke:rgb(41,128,185);stroke-width:0'%3E%3C/polygon%3E%3C/svg%3E");
      background-repeat: no-repeat;
      // Scales the image as large as possible and maintains image aspect ratio
      // (image doesn't get squished). The image "covers" the entire width or height of the container.
      background-size: cover;
      width: 100%;
      background-position: center;
      // The content CSS property is used with the ::before and ::after pseudo-elements to generate
      // content in an element. Objects inserted using the content property are anonymous.
      // if the pseudo-element has no content, it won't display at all
      content: '';
    }
  }

// diagonal section divider mixin
// based on example from: https://blog.omgmog.net
// better to specify a fixed $height than an angle so top/bottom whitespace (margin/padding) doesn't change with viewport width
@mixin diagonal-background-bottom($width: 1000px, $height: 60px, $color: $blue) {
	position: relative;
	$v-pad: (($height / $width) * 100) * 1%;
	padding-top: $v-pad;
    // have to add a margin to the last child in <section> (of any type), because it's an absolute value in px versus a % like v-pad, so it cannot be directly added to the <section>'s padding-bottom as "padding-bottom: $v-pad + $padding-default"
    & > :first-child {
    	padding-top: $padding-default;
    }
    &::before {
    	//gives the svg a $blue colored whitespace of $padding-default vertical height
    	height: $padding-default;
    	position: absolute;
    	top: 0;
    	left: 0;
    	$w-int: $width / 1px;
    	$h-int: $height / 1px;
    	padding-top: $v-pad;
    	background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='#{$w-int}' height='#{$h-int}'%3E%3Cpolygon points='0,#{$h-int} #{$w-int},0 0,0' fill='rgb(41,128,185)' stroke = 'rgb(41,128,185)'%3E%3C/polygon%3E%3C/svg%3E");
    	background-repeat: no-repeat;
    	background-size: cover;
    	width: 100%;
      background-position: center;
    	content: '';
    }
  }